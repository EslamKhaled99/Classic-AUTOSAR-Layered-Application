 /******************************************************************************
 *
 * Module: Port
 *
 * File Name: Port.h
 *
 * Description: Header file for TM4C123GH6PM Microcontroller - Port Driver.
 *
 * Author: Mohamed Tarek
 ******************************************************************************/

#ifndef PORT_H
#define PORT_H

/*******************************************************************************
 *                       Version Definitions and IDs                           *
 *******************************************************************************/
#define PORT_VENDOR_ID                  (0x0019)

#define PORT_MODULE_ID                  (124U)

#define PORT_INSTANCE_ID                (0U)

/*
 * AUTOSAR Version 4.0.2
 */
#define PORT_AR_RELEASE_MAJOR_VERSION   (4U)
#define PORT_AR_RELEASE_MINOR_VERSION   (0U)
#define PORT_AR_RELEASE_PATCH_VERSION   (2U)

/*
 * Software Version 1.0.0
 */
#define PORT_SW_MAJOR_VERSION           (1U)
#define PORT_SW_MINOR_VERSION           (0U)
#define PORT_SW_PATCH_VERSION           (0U)

/*******************************************************************************
 *                                   INCLUDES                                  *
 *******************************************************************************/
/* AUTOSAR Standard Types */
#include "Std_Types.h"

/* Checking files compitability between Port.h and Std_Types.h */
#if ((PORT_AR_RELEASE_MAJOR_VERSION != STD_TYPES_AR_RELEASE_MAJOR_VERSION)\ 
 ||  (PORT_AR_RELEASE_MINOR_VERSION != STD_TYPES_AR_RELEASE_MINOR_VERSION)\
 ||  (PORT_AR_RELEASE_PATCH_VERSION != STD_TYPES_AR_RELEASE_PATCH_VERSION))
      #error "The AR version of Std_Types.h does not match the expected version"
#endif

/* AUTOSAR Port pre-compile configuration file */
#include "Port_Cfg.h"
   
/* Checking AUTOSAR Release compitability between Port.h and Port_Cfg.h */
#if ((PORT_AR_RELEASE_MAJOR_VERSION != PORT_CFG_AR_RELEASE_MAJOR_VERSION)\ 
 ||  (PORT_AR_RELEASE_MINOR_VERSION != PORT_CFG_AR_RELEASE_MINOR_VERSION)\
 ||  (PORT_AR_RELEASE_PATCH_VERSION != PORT_CFG_AR_RELEASE_PATCH_VERSION))
      #error "The AR version of Port_Cfg.h does not match the expected version"
#endif

/* Checking Software compitability between Port.h and Port_Cfg.h */
#if ((PORT_SW_MAJOR_VERSION != PORT_CFG_SW_MAJOR_VERSION)\ 
 ||  (PORT_SW_MINOR_VERSION != PORT_CFG_SW_MINOR_VERSION)\
 ||  (PORT_SW_PATCH_VERSION != PORT_CFG_SW_PATCH_VERSION))
      #error "The AR version of Port_Cfg.h does not match the expected version"
#endif

/* Non-AUTOSAR Files */
#include "Common_Macros.h"

/*******************************************************************************
 *                                  Port Status                                *
 *******************************************************************************/
#define PORT_INITIALIZED                (1U)
#define PORT_NOT_INITIALIZED            (0U)
   
/*******************************************************************************
 *                                DET Error Codes                              *
 *******************************************************************************/
/* Invalid Port Pin ID requested */
#define PORT_E_PARAM_PIN                (uint8)0x0A
   
/* Port Pin not configured as changeable*/
#define PORT_E_DIRECTION_UNCHANGEABLE   (uint8)0x0B
   
/* API Port_Init service called with wrong parameter */
#define PORT_E_PARAM_CONFIG             (uint8)0x0C
   
/* API Port_SetPinMode service called when mode is invalid*/
#define PORT_E_PARAM_INVALID_MODE       (uint8)0x0D
   
/* API Port_SetPinMode service called when mode is unchangeable*/
#define PORT_E_MODE_UNCHANGEABLE        (uint8)0x0E
   
/* API service called without module initialization */   
#define PORT_E_UNINIT                   (uint8)0x0F
   
/* APIs called with a Null Pointer */
#define PORT_E_POINTER                  (uint8)0x10
   
/*******************************************************************************
 *                                API Services ID                              *
 *******************************************************************************/
/* Service ID for Port init */
#define PORT_INIT_SID                   (uint8)0x00
   
/* Service ID for Port set pin direction */
#define PORT_SET_PIN_DIRECTION_SID      (uint8)0x01
   
/* Service ID for Port refresh pin direction */
#define PORT_REFRESH_PORT_DIRECTION     (uint8)0x02
   
/* Service ID for Port get version info */
#define PORT_GET_VERSION_INFO_SID       (uint8)0x03
   
/* Service ID for Port set pin mode */
#define PORT_SET_PIN_MODE_SID           (uint8)0x04

/*******************************************************************************
 *                              Module Data Types                              *
 *******************************************************************************/
   
/*******************************************************************************
* Name: Port_PinType
* Type: uint
* Range: 0 - <number of port pins>
* Description: Data Type for symbolic name of a port pin.
********************************************************************************/
typedef uint8 Port_PinType

/*******************************************************************************
* Name: Port_PortType
* Type: uint
* Range: 0 - <number of ports>
* Description: Data Type for symbolic name of a ports.
********************************************************************************/
typedef uint8 Port_PortType

/*******************************************************************************
* Name: Port_PinDirectionType
* Type: Enumeration
* Range: PORT_PIN_IN  - Sets port pin as input
*        PORT_PIN_OUT - Sets port pin as output
* Description: Possible Directions of a port pin.
********************************************************************************/
typedef enum
{
  PORT_PIN_IN = 0,
  PORT_PIN_OUT = 1
}Port_PinDirectionType;

/*******************************************************************************
* Name: Port_PinInternalResistorType
* Type: Enumeration
* Range: PORT_PIN_INTERNAL_RESISTOR_OFF  - Turns off the pin internal network
*        PORT_PIN_INTERNAL_RESISTOR_UP   - Activates the pin pull-up resistor
*        PORT_PIN_INTERNAL_RESISTOR_DOWN - Activates the pin pull-down resistor
* Description: Possible internal resistor configurations
********************************************************************************/
typedef enum
{
    PORT_PIN_INTERNAL_RESISTOR_OFF = 0,
    PORT_PIN_INTERNAL_RESISTOR_UP = 1,
    PORT_PIN_INTERNAL_RESISTOR_DOWN = 2
}Port_PinInternalResistorType;

/*******************************************************************************
* Name: Port_PinModeType
* Type: uint
* Range: Implementation specific to cover all modes
* Description: Data Type for different pin modes used with the function call
               Port_SetPinMode.
********************************************************************************/
typedef uint8 Port_PinModeType

/*******************************************************************************
* Name: Port_ConfigPin
* Type: Structure
* Range: Hardware dependent structure
* Description: Type of the external data structure containing the initialization
               data for this module. Supported initialization data:
                1. Pin number
                2. Port number
                3. Pin mode
                4. Pin direction
                5. Pin initial value
                6. Internal pull-up/down resistor control                
                7. Pin direction changeable
                8. Pin mode changeable
                
********************************************************************************/
typedef struct
{
  Port_PinType pin_num;
  Port_PortType port_num;
  Port_PinModeType pin_mode;
  Port_PinDirectionType pin_direction;
  bool pin_initialValue;
  Port_PinInternalResistorType pin_internalResistor;
  bool pin_directionChangeable;
  bool pin_modeChangeable;
}Port_ConfigPin;

/*******************************************************************************
* Name: Port_ConfigType
* Type: Structure
* Range: Hardware dependent structure
* Description: Type for data used to initialize the port module  
********************************************************************************/
typedef struct
{
  Port_ConfigPin[PORT_PINS_NUM];
}Port_ConfigType;
   
/*******************************************************************************
 *                             Function Prototypes                             *
 *******************************************************************************/

/*******************************************************************************
* Service Name: Port_Init
* Service ID: 0x00
* Sync/Async: Synchronous
* Reentrancy: Non Reentrant
* Parameters (in): ConfigPtr - Pointer to post-build configuration data
* Parameters (inout): None
* Parameters (out): None
* Return value: None
* Description: Initialize the Port Driver module
********************************************************************************/
void Port_Init(const Port_ConfigType* ConfigPtr);

#if (STD_ON == PORT_SET_DIRECTION_API)
/*******************************************************************************
* Service Name: Port_SetPinDirection
* Service ID: 0x01
* Sync/Async: Synchronous
* Reentrancy: Reentrant
* Parameters (in): Pin       - Port Pin ID number
*                  Direction - Port Pin Direction
* Parameters (inout): None
* Parameters (out): None
* Return value: None
* Description: Sets the port pin direction
********************************************************************************/
void Port_SetPinDirection(Port_PinType Pin, Port_PinDirectionType Direction);
#endif

/*******************************************************************************
* Service Name: Port_RefreshPortDirection
* Service ID: 0x02
* Sync/Async: Synchronous
* Reentrancy: Non Reentrant
* Parameters (in): None
* Parameters (inout): None
* Parameters (out): None
* Return value: None
* Description: Refreshes port direction
********************************************************************************/
void Port_RefreshPortDirection(void);

/*******************************************************************************
* Service Name: Port_GetVersionInfo
* Service ID: 0x03
* Sync/Async: Synchronous
* Reentrancy: Non Reentrant
* Parameters (in): None
* Parameters (inout): None
* Parameters (out): versioninfo - Pointer to where to store the version info
* Return value: None
* Description: Returns the version information of this module
********************************************************************************/
void Port_GetVersionInfo(Std_VersionInfoType* versioninfo);

#if (STD_ON == PORT_SET_MODE_API)
/*******************************************************************************
* Service Name: Port_SetPinMode
* Service ID: 0x04
* Sync/Async: Synchronous
* Reentrancy: Reentrant
* Parameters (in): Pin  - Port Pin ID number
*                  Mode - New Port Pin mode to be set on port pin
* Parameters (inout): None
* Parameters (out): None
* Return value: None
* Description: Sets the port pin mode
********************************************************************************/
void Port_SetPinMode(Port_PinType Pin, Port_PinModeType Mode);
#endif

/*******************************************************************************
 *                              Module Definitions                             *
 *******************************************************************************/
/* GPIO Registers base addresses */
#define GPIO_PORTA_BASE_ADDRESS         0x40004000
#define GPIO_PORTB_BASE_ADDRESS         0x40005000
#define GPIO_PORTC_BASE_ADDRESS         0x40006000
#define GPIO_PORTD_BASE_ADDRESS         0x40007000
#define GPIO_PORTE_BASE_ADDRESS         0x40024000
#define GPIO_PORTF_BASE_ADDRESS         0x40025000

/* GPIO Registers offset addresses */
#define PORT_DATA_REG_OFFSET            0x3FC
#define PORT_DIR_REG_OFFSET             0x400
#define PORT_ALT_FUNC_REG_OFFSET        0x420
#define PORT_PULL_UP_REG_OFFSET         0x510
#define PORT_PULL_DOWN_REG_OFFSET       0x514
#define PORT_DIGITAL_ENABLE_REG_OFFSET  0x51C
#define PORT_LOCK_REG_OFFSET            0x520
#define PORT_COMMIT_REG_OFFSET          0x524
#define PORT_ANALOG_MODE_SEL_REG_OFFSET 0x528
#define PORT_CTL_REG_OFFSET             0x52C

/* GPIO Modes */
/* Maximum Mode Number */
#define MAX_MODE_NUMBER                 (16U)

/* DIGITAL I/O MODE */
#define PORT_DIGITAL_IO                 (0U)

/* PA0 Modes */
#define PORT_PA0_U0RX                   (1U)                    
#define PORT_PA0_CAN1Rx                 (8U)

/* PA1 Modes */
#define PORT_PA1_U0Tx                   (1U)           
#define PORT_PA1_CAN1Tx                 (8U)

/* PA2 Modes */
#define PORT_PA2_SSI0Clk                (2U)

/* PA3 Modes */
#define PORT_PA3_SSI0Fss                (2U)

/* PA4 Modes */
#define PORT_PA4_SSI0Rx                 (2U)

/* PA5 Modes */
#define PORT_PA5_SSI0Tx                 (2U)

/* PA6 Modes */
#define PORT_PA6_I2C1SCL                (3U)
#define PORT_PA6_M1PWM2                 (5U)

/* PA7 Modes */
#define PORT_PA7_I2C1SDA                (3U)
#define PORT_PA7_M1PWM3                 (5U)

/* PB0 Modes */
#define PORT_PB0_U1Rx                   (1U)
#define PORT_PB0_T2CCP0                 (7U)

/* PB1 Modes */
#define PORT_PB1_U1Tx                   (1U)
#define PORT_PB1_T2CCP1                 (7U)

/* PB2 Modes */
#define PORT_PB2_I2C0SCL                (3U)
#define PORT_PB2_T3CCP0                 (7U)

/* PB3 Modes */
#define PORT_PB3_I2C0SDA                (3U)
#define PORT_PB3_T3CCP1                 (7U)

/* PB4 Modes */
#define PORT_PB4_SSI2Clk                (2U)
#define PORT_PB4_M0PWM2                 (4U)
#define PORT_PB4_T1CCP0                 (7U)
#define PORT_PB4_CAN0Rx                 (8U)

/* PB5 Modes */
#define PORT_PB5_SSI2Fss                (2U)
#define PORT_PB5_M0PWM3                 (4U)
#define PORT_PB5_T1CCP1                 (7U)
#define PORT_PB5_CAN0Tx                 (8U)

/* PB6 Modes */
#define PORT_PB6_SSI2Rx                 (2U)
#define PORT_PB6_M0PWM0                 (4U)
#define PORT_PB6_T0CCP0                 (7U)

/* PB7 Modes */
#define PORT_PB7_SSI2Tx                 (2U)
#define PORT_PB7_M0PWM1                 (4U)
#define PORT_PB7_T0CCP1                 (7U)

/* PC0 Modes */
#define PORT_PC0_TCK_SWCLK              (1U)
#define PORT_PC0_T4CCP0                 (7U)

/* PC1 Modes */
#define PORT_PC1_TMS_SWDIO              (1U)
#define PORT_PC1_T4CCP1                 (7U)

/* PC2 Modes */
#define PORT_PC2_TDI                    (1U)
#define PORT_PC2_T5CCP0                 (7U)

/* PC3 Modes */
#define PORT_PC3_TDO_SWO                (1U)
#define PORT_PC3_T5CCP1                 (7U)

/* PC4 Modes */
#define PORT_PC4_U4Rx                   (1U)
#define PORT_PC4_U1Rx                   (2U)
#define PORT_PC4_M0PWM6                 (4U)
#define PORT_PC4_IDX1                   (6U)
#define PORT_PC4_WT0CCP0                (7U)
#define PORT_PC4_U1RTS                  (8U)

/* PC5 Modes */
#define PORT_PC5_U4Tx                   (1U)
#define PORT_PC5_U1Tx                   (2U)
#define PORT_PC5_M0PWM7                 (4U)
#define PORT_PC5_PhA1                   (6U)
#define PORT_PC5_WT0CCP1                (7U)
#define PORT_PC5_U1CTS                  (8U)

/* PC6 Modes */
#define PORT_PC6_U3Rx                   (1U)
#define PORT_PC6_PhB1                   (6U)
#define PORT_PC6_WT1CCP0                (7U)
#define PORT_PC6_USB0EPEN               (8U)

/* PC7 Modes */
#define PORT_PC7_U3Tx                   (1U)
#define PORT_PC7_WT1CCP1                (7U)
#define PORT_PC7_USB0PFLT               (8U)

/* PD0 Modes */
#define PORT_PD0_SSI3Clk                (1U)
#define PORT_PD0_SSI1Clk                (2U)
#define PORT_PD0_I2C3SCL                (3U)
#define PORT_PD0_M0PWM6                 (4U)
#define PORT_PD0_M1PWM0                 (5U)
#define PORT_PD0_WT2CCP0                (7U)

/* PD1 Modes */
#define PORT_PD1_SSI3Fss                (1U)
#define PORT_PD1_SSI1Fss                (2U)
#define PORT_PD1_I2C3SDA                (3U)
#define PORT_PD1_M0PWM7                 (4U)
#define PORT_PD1_M1PWM1                 (5U)
#define PORT_PD1_WT2CCP1                (7U)

/* PD2 Modes */
#define PORT_PD2_SSI3Rx                 (1U)
#define PORT_PD2_SSI1Rx                 (2U)
#define PORT_PD2_M0FAULT0               (4U)
#define PORT_PD2_WT3CCP0                (7U)
#define PORT_PD2_USB0EPEN               (8U)

/* PD3 Modes */
#define PORT_PD3_SSI3Tx                 (1U)
#define PORT_PD3_SSI1Tx                 (2U)
#define PORT_PD3_IDX0                   (6U)
#define PORT_PD3_WT3CCP1                (7U)
#define PORT_PD3_USB0PFLT               (8U)

/* PD4 Modes */
#define PORT_PD4_U6Rx                   (1U)
#define PORT_PD4_WT4CCP0                (7U)

/* PD5 Modes */
#define PORT_PD5_U6Tx                   (1U)
#define PORT_PD5_WT4CCP1                (7U)

/* PD6 Modes */
#define PORT_PD6_U2Rx                   (1U)
#define PORT_PD6_M0FAULT0               (4U)
#define PORT_PD6_PhA0                   (6U)
#define PORT_PD6_WT5CCP0                (7U)

/* PD7 Modes */
#define PORT_PD7_U2Tx                   (1U)
#define PORT_PD7_PhB0                   (6U)
#define PORT_PD7_WT5CCP1                (7U)
#define PORT_PD7_NMI                    (8U)

/* PE0 Modes */
#define PORT_PE0_U7Rx                   (1U)

/* PE1 Modes */
#define PORT_PE1_U7Tx                   (1U)

/* PE4 Modes */
#define PORT_PE4_U5Rx                   (1U)
#define PORT_PE4_I2C2SCL                (3U)
#define PORT_PE4_M0PWM4                 (4U)
#define PORT_PE4_M1PWM2                 (5U)
#define PORT_PE4_CAN0Rx                 (8U)

/* PE5 Modes */
#define PORT_PE5_U5Tx                   (1U)
#define PORT_PE5_I2C2SDA                (3U)
#define PORT_PE5_M0PWM5                 (4U)
#define PORT_PE5_M1PWM3                 (5U)
#define PORT_PE5_CAN0Tx                 (8U)

/* PF0 Modes */
#define PORT_PF0_U1RTS                  (1U)
#define PORT_PF0_SSI1Rx                 (2U)
#define PORT_PF0_CAN0Rx                 (3U)
#define PORT_PF0_M1PWM4                 (5U)
#define PORT_PF0_PhA0                   (6U)
#define PORT_PF0_T0CCP0                 (7U)
#define PORT_PF0_NMI                    (8U)
#define PORT_PF0_C0o                    (9U)

/* PF1 Modes */
#define PORT_PF1_U1CTS                  (1U)
#define PORT_PF1_SSI1Tx                 (2U)
#define PORT_PF1_M1PWM5                 (5U)
#define PORT_PF1_PhB0                   (6U)
#define PORT_PF1_T0CCP1                 (7U)
#define PORT_PF1_C1o                    (9U)
#define PORT_PF1_TRD1                   (10U)

/* PF2 Modes */
#define PORT_PF2_SSI1Clk                (2U)
#define PORT_PF2_M0FAULT0               (4U)
#define PORT_PF2_M1PWM6                 (5U)
#define PORT_PF2_T1CCP0                 (7U)
#define PORT_PF2_TRD0                   (10U)

/* PF3 Modes */
#define PORT_PF3_SSI1Fss                (2U)
#define PORT_PF3_CAN0Tx                 (3U)
#define PORT_PF3_M1PWM7                 (5U)
#define PORT_PF3_T1CCP1                 (7U)
#define PORT_PF3_TRCLK                  (10U)

/* PF4 Modes */
#define PORT_PF4_M1FAULT0               (5U)
#define PORT_PF4_IDX0                   (6U)
#define PORT_PF4_T2CCP0                 (7U)
#define PORT_PF4_USB0EPEN               (8U)      

/*******************************************************************************
 *                       External Variables                                    *
 *******************************************************************************/

/* Extern PB structures to be used by Port and other modules */
extern const Port_ConfigType Port_Configuration;

/*******************************************************************************
* Service Name: Port_SetupGpioPin
* Sync/Async: Synchronous
* Reentrancy: reentrant
* Parameters (in): ConfigPtr - Pointer to post-build configuration data
* Parameters (inout): None
* Parameters (out): None
* Return value: None
* Description: Function to Setup the pin configuration:
*              - Setup the pin as Digital GPIO pin
*              - Setup the direction of the GPIO pin
*              - Setup the internal resistor for i/p pin
********************************************************************************/
void Port_SetupGpioPin(const Port_ConfigType *ConfigPtr );

#endif /* PORT_H */
